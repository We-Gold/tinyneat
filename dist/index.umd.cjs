(function(v,P){typeof exports=="object"&&typeof module<"u"?P(exports):typeof define=="function"&&define.amd?define(["exports"],P):(v=typeof globalThis<"u"?globalThis:v||self,P(v.tinyneat={}))})(this,function(v){"use strict";const P=n=>{const e={},t={};for(const o of n){if(!o.enabled)continue;const[s,i]=o.connection;s in e||(e[s]=[]),i in t||(t[i]=[]),i in e||(e[i]=[]),s in t||(t[s]=[]),e[s].push(i),t[i].push(s)}return{inputToOutput:e,outputToInput:t}},I=(n,e)=>{const t={};for(const[i,r]of Object.entries(e))t[parseInt(i)]=r.length;const o=Object.entries(e).filter(([,i])=>i.length===0).map(([i])=>+i),s=[];for(;o.length>0;){const i=o.pop();s.push(i);for(const r of n[i])--t[r]===0&&o.push(r)}return s.length===Object.keys(e).length?s:[]},C={sigmoid:n=>1/(1+Math.exp(-n)),modifiedSigmoid:n=>1/(1+Math.exp(-4.9*n)),tanh:n=>Math.tanh(n),relu:n=>n>0?n:0,posAndNegSigmoid:n=>2/(1+Math.exp(-n))-1},g=n=>Math.random()<=n,y=n=>n[A(n)],A=n=>Math.round(Math.random()*(n.length-1)),S=n=>(2*Math.random()-1)*n,F=Object.freeze(Object.defineProperty({__proto__:null,chooseRandom:y,chooseRandomIndex:A,random:g,uniformRandomWeight:S},Symbol.toStringTag,{value:"Module"})),_=(n,e,t,o)=>{const s={};for(const a of t)s[a.connection.toString()]=a.weight;const{inputToOutput:i,outputToInput:r}=P(t),l=I(i,r);if(l.length===0)throw new Error("Received an unexpected graph structure, make sure the ANN is configured correctly.");return{process:a=>{if(a.length!==n)throw new Error(`Received inputs of length ${a.length}, but expected length ${n}`);const d=Array(t.length).fill(0);for(const c of l)if(c<n)d[c]=a[c];else{let b=0;for(const f of r[c])b+=s[[f,c].toString()]*d[f];d[c]=o(b)}const p=Array(e).fill(0);for(let c=0;c<d.length;c++)l[c]>=n&&l[c]<n+e&&(p[l[c]-n]=d[c]);return p}}},z=(n,e)=>n.weight-e.weight,E=(n,e)=>{n.weight+=S(e)},k=n=>({...n}),R=(n,e)=>{const t=(n.weight+e.weight)/2;return{...n,weight:t}},B=(n,e)=>({...n,weight:S(e)}),L=n=>({...n,weight:1}),$=(n,e)=>({...n,weight:e.weight}),W={weightMutationRange:1,activation:"posAndNegSigmoid"},M=(n={})=>{const e={...W,...n};return{createNetwork:(t,o,s)=>_(t,o,s,C[e.activation]),calculateGeneDistance:z,mutateGeneWeight:t=>E(t,e.weightMutationRange),cloneGene:k,averageGenes:R,configureRandomGene:t=>B(t,e.weightMutationRange),configureNewGene:L,configureCloneGene:$}},O=n=>({handleInitialPopulation:o=>n.forEach(s=>{var i;return(i=s.handleInitialPopulation)==null?void 0:i.call(s,o)}),handleEvolve:o=>n.forEach(s=>{var i;return(i=s.handleEvolve)==null?void 0:i.call(s,o)})}),j=()=>({handleInitialPopulation:t=>{console.log("Beginning NEAT"),console.log("______________"),console.log(`Initial Population Size: ${t.config.initialPopulationSize}`),console.log("Complete Config: "),console.log(t.config),console.log("")},handleEvolve:t=>{var o;t.complete?console.log(`NEAT completed at generation ${t.generation}:`):console.log(`Results of generation ${t.generation}:`),console.log(`Population Size: ${t.population.length}`),console.log(`Number of Species: ${t.species.length}`),console.log(`Max Fitness: ${(o=t.bestGenomes)==null?void 0:o[0].fitness}`),t.complete&&(console.log("Best Genomes: "),console.log(t.bestGenomes)),console.log("")}}),D=Object.freeze(Object.defineProperty({__proto__:null,ANNPlugin:M,Activation:C,ConsoleLogger:j,LoggingManager:O,createAdjacencyList:P,helpers:F,topologicalSort:I},Symbol.toStringTag,{value:"Module"})),V={initialPopulationSize:50,targetSpecies:10,maxGenerations:100,maximumStagnation:15,excessCoefficient:2,disjointCoefficient:2,weightDifferenceCoefficient:1,compatibilityThreshold:6,compatibilityModifier:.3,survivalThreshold:.2,mutateOnlyProbability:.25,mateOnlyProbability:.2,addNodeProbability:.03,addLinkProbability:.05,mutateWeightProbability:.3,interspeciesMatingRate:.01,mateByChoosingProbability:.6,mateByAveragingProbability:.4,reenableConnectionProbability:.01,fitnessSort:"max",largeNetworkSize:20,minimumSpeciesSize:1,hallOfFameSize:10,inputSize:1,outputSize:1,nnPlugin:M(),loggingPlugins:[j()]},q=(n,e)=>{const t=[];for(let s=0;s<e.inputSize;s++)for(let i=0;i<e.outputSize;i++){const r=[s,e.inputSize+i],l=n.getInnovation(r);t.push(e.nnPlugin.configureRandomGene({connection:r,enabled:!0,innovationNumber:l}))}const o=e.inputSize+e.outputSize-1;return N(t,o,e)},N=(n,e,t)=>{if(t.inputSize<1||t.outputSize<1)throw new Error("Invalid neural network input or output size. Verify that there are at least 1 of each.");const o=t.nnPlugin.createNetwork(t.inputSize,t.outputSize,n);return{genes:n,fitness:0,adjustedFitness:0,process:o.process,maxGeneIndex:e}},H=(n,e,t)=>{e.genes.length>n.genes.length&&([n,e]=[e,n]);const o=n.genes.length,s=e.genes.length,i=o-s;let r=0,l=0,u=0,a=0,d=0;const p=o>t.largeNetworkSize?o:1;for(;a<o&&d<s;)n.genes[a].innovationNumber===e.genes[d].innovationNumber?(l+=t.nnPlugin.calculateGeneDistance(n.genes[a++],n.genes[d++]),u++):n.genes[a].innovationNumber>e.genes[d].innovationNumber?(r++,d++):n.genes[a].innovationNumber<e.genes[d].innovationNumber&&(r++,a++);return t.excessCoefficient*i/p+t.disjointCoefficient*r/p+t.weightDifferenceCoefficient*(l/u)},T=(n,e,t)=>{const o=e.adjustedFitness===n.adjustedFitness;e.adjustedFitness>n.adjustedFitness&&([n,e]=[e,n]);const s=o?Math.max(n.maxGeneIndex,e.maxGeneIndex):n.maxGeneIndex,i=n.genes.length,r=e.genes.length,l=[];let u=0,a=0;for(;u<i;){const d=n.genes[u],p=e.genes[a];if(a>=r){const c=t.nnPlugin.cloneGene(d);g(t.reenableConnectionProbability)&&(c.enabled=!0),l.push(),u++}else if(d.innovationNumber===p.innovationNumber){let c;g(t.mateByChoosingProbability)?c=t.nnPlugin.cloneGene(Math.random()<.5?d:p):c=t.nnPlugin.averageGenes(d,p),g(t.reenableConnectionProbability)&&(c.enabled=!0),l.push(c),u++,a++}else if(d.innovationNumber>p.innovationNumber){const c=t.nnPlugin.cloneGene(d);g(t.reenableConnectionProbability)&&(c.enabled=!0),l.push(c),u++,a++}else if(d.innovationNumber<p.innovationNumber){if(o){const c=t.nnPlugin.cloneGene(p);g(t.reenableConnectionProbability)&&(c.enabled=!0),l.push(c),a++}u++}}return{newGenes:l,maxGeneIndex:s}},J=(n,e,t,o,s,i,r)=>{const l=Array.from({length:o+1},(h,x)=>x),u=l.slice();u.splice(s,i);let a=y(u);const d=l.slice(s);let p=y(d);if(a===p)return;const c=t.findIndex(h=>h===a),b=t.findIndex(h=>h===p);c>b&&([a,p]=[p,a]);const f=n.find(h=>h.connection[0]===a&&h.connection[1]===p);if(f!==void 0){f.enabled=!0;return}const G=[a,p],m=e.getInnovation(G);n.push(r.nnPlugin.configureNewGene({connection:G,enabled:!0,innovationNumber:m}))},K=(n,e,t,o)=>{const s=y(n);s.enabled=!1;const i=t+1,r=[s.connection[0],i],l=[i,s.connection[1]];return n.push(o.nnPlugin.configureNewGene({connection:r,enabled:!0,innovationNumber:e.getInnovation(r)})),n.push(o.nnPlugin.configureCloneGene({connection:l,enabled:!0,innovationNumber:e.getInnovation(l)},s)),i},Q=(n,e,t,o)=>{for(let i=0;i<e.length;i++)e[i].population=[];for(const i of n){let r=!1;for(const l of e)if(H(l.representative,i,t)<t.compatibilityThreshold&&!r){l.population.push(i),i.fitness>l.recordFitness&&(l.recordFitness=i.fitness,l.recordGeneration=o),r=!0;break}r||e.push(U(i,o))}return e.filter(i=>i.population.length>0)},U=(n,e)=>({population:[n],recordFitness:n.fitness,recordGeneration:e,createdGeneration:e,representative:n}),X=(n,e,t,o,s)=>{const i=Q(n,e,o,s);ee(i,o),Y(i);const r=Z(n,i,o,s),l=[];for(const[u,a]of i.entries()){const d=a.population.sort((b,f)=>f.adjustedFitness-b.adjustedFitness),p=d.slice(0,Math.max(a.population.length*o.survivalThreshold,o.minimumSpeciesSize)),c=d[0];l.push(N(structuredClone(c.genes),c.maxGeneIndex,o));for(let b=0;b<Math.max(r[u]-1,o.minimumSpeciesSize);b++){const f=y(p);let G=y(p);g(o.interspeciesMatingRate)&&(G=y(y(i).population));let m,h;if(g(o.mateOnlyProbability)){const x=T(f,G,o);m=x.newGenes,h=x.maxGeneIndex}else{if(g(o.mutateOnlyProbability))m=structuredClone(f.genes),h=f.maxGeneIndex;else{const w=T(f,G,o);m=w.newGenes,h=w.maxGeneIndex}const{inputToOutput:x,outputToInput:ie}=P(m),se=I(x,ie);g(o.addLinkProbability)?J(m,t,se,h,o.inputSize,o.outputSize,o):g(o.addNodeProbability)&&(h=K(m,t,h,o));for(const w of m)g(o.mutateWeightProbability)&&o.nnPlugin.mutateGeneWeight(w)}l.push(N(m,h,o))}}return{nextPopulation:l,nextSpecies:i}},Y=n=>{for(const e of n)for(const t of e.population)t.adjustedFitness=t.fitness/e.population.length},Z=(n,e,t,o)=>{const s=e.map(l=>l.population.reduce((u,a)=>u+a.adjustedFitness,0)/l.population.length),i=s.reduce((l,u)=>l+u,0);return s.map(l=>Math.round(l/i*n.length)).map((l,u)=>o-e[u].recordGeneration>=t.maximumStagnation?Math.floor(l/2):l)},ee=(n,e)=>{n.length<e.targetSpecies?e.compatibilityThreshold-=e.compatibilityModifier:n.length>e.targetSpecies&&(e.compatibilityThreshold+=e.compatibilityModifier),e.compatibilityThreshold<e.compatibilityModifier&&(e.compatibilityThreshold=e.compatibilityModifier)},ne=n=>{const e=Array(n);let t=-1/0;return{tryAdding:i=>{var l;if(i.fitness<t)return;const r=e.findIndex(u=>u&&u.fitness<=i.fitness);r===-1?e.unshift(i):r===e.length-1?e.push(i):e.splice(r,0,i),e.length>n&&e.pop(),t=((l=e.at(-1))==null?void 0:l.fitness)??-1/0},getBestGenomes:()=>e}},te=()=>{let n=0;const e={},t=s=>{const i=n++;return e[s.toString()]=i,i};return{addInnovation:t,getInnovation:s=>e[s.toString()]??t(s)}},oe=(n={})=>{var b;const e={...V,...n},t=O(e.loggingPlugins);let o=Array(e.initialPopulationSize),s=[];const i=te(),r=ne(e.hallOfFameSize);for(let f=0;f<e.initialPopulationSize;f++)o[f]=q(i,e);(b=t.handleInitialPopulation)==null||b.call(t,{population:o,config:e});const l=()=>o,u=()=>o.entries();let a=0;const d=()=>a,p=()=>a>=e.maxGenerations;return{getPopulation:l,getPopulationIndexed:u,getCurrentGeneration:d,complete:p,evolve:()=>{var m;switch(e.fitnessSort){case"max":break;case"min":o.forEach(h=>h.fitness*=-1)}o.forEach(h=>r.tryAdding(h));const{nextPopulation:f,nextSpecies:G}=X(o,s,i,e,a);o=f,s=G,a++,(m=t.handleEvolve)==null||m.call(t,{population:o,config:e,generation:a,species:s,bestGenomes:r.getBestGenomes(),complete:p()})},getBestGenomes:r.getBestGenomes}};v.TinyNEAT=oe,v.plugins=D,Object.defineProperty(v,Symbol.toStringTag,{value:"Module"})});
